// Generated by gencpp from file mcptam/TrackerTiming.msg
// DO NOT EDIT!


#ifndef MCPTAM_MESSAGE_TRACKERTIMING_H
#define MCPTAM_MESSAGE_TRACKERTIMING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mcptam
{
template <class ContainerAllocator>
struct TrackerTiming_
{
  typedef TrackerTiming_<ContainerAllocator> Type;

  TrackerTiming_()
    : header()
    , kf_downsample(0.0)
    , kf_mask(0.0)
    , kf_feature(0.0)
    , sbi(0.0)
    , motion(0.0)
    , pvs(0.0)
    , shuffle(0.0)
    , coarse(0.0)
    , fine(0.0)
    , pose(0.0)
    , depth(0.0)
    , add(0.0)
    , total(0.0)
    , map_num_mkfs(0)
    , map_num_points(0)  {
    }
  TrackerTiming_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , kf_downsample(0.0)
    , kf_mask(0.0)
    , kf_feature(0.0)
    , sbi(0.0)
    , motion(0.0)
    , pvs(0.0)
    , shuffle(0.0)
    , coarse(0.0)
    , fine(0.0)
    , pose(0.0)
    , depth(0.0)
    , add(0.0)
    , total(0.0)
    , map_num_mkfs(0)
    , map_num_points(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _kf_downsample_type;
  _kf_downsample_type kf_downsample;

   typedef float _kf_mask_type;
  _kf_mask_type kf_mask;

   typedef float _kf_feature_type;
  _kf_feature_type kf_feature;

   typedef float _sbi_type;
  _sbi_type sbi;

   typedef float _motion_type;
  _motion_type motion;

   typedef float _pvs_type;
  _pvs_type pvs;

   typedef float _shuffle_type;
  _shuffle_type shuffle;

   typedef float _coarse_type;
  _coarse_type coarse;

   typedef float _fine_type;
  _fine_type fine;

   typedef float _pose_type;
  _pose_type pose;

   typedef float _depth_type;
  _depth_type depth;

   typedef float _add_type;
  _add_type add;

   typedef float _total_type;
  _total_type total;

   typedef int32_t _map_num_mkfs_type;
  _map_num_mkfs_type map_num_mkfs;

   typedef int32_t _map_num_points_type;
  _map_num_points_type map_num_points;




  typedef boost::shared_ptr< ::mcptam::TrackerTiming_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcptam::TrackerTiming_<ContainerAllocator> const> ConstPtr;

}; // struct TrackerTiming_

typedef ::mcptam::TrackerTiming_<std::allocator<void> > TrackerTiming;

typedef boost::shared_ptr< ::mcptam::TrackerTiming > TrackerTimingPtr;
typedef boost::shared_ptr< ::mcptam::TrackerTiming const> TrackerTimingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcptam::TrackerTiming_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcptam::TrackerTiming_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mcptam

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'mcptam': ['/home/vgrlab/catkin_ws/src/mcptam/msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mcptam::TrackerTiming_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcptam::TrackerTiming_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcptam::TrackerTiming_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcptam::TrackerTiming_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcptam::TrackerTiming_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcptam::TrackerTiming_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcptam::TrackerTiming_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e38bbb76e830094ff670d4df851e26a3";
  }

  static const char* value(const ::mcptam::TrackerTiming_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe38bbb76e830094fULL;
  static const uint64_t static_value2 = 0xf670d4df851e26a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mcptam::TrackerTiming_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcptam/TrackerTiming";
  }

  static const char* value(const ::mcptam::TrackerTiming_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcptam::TrackerTiming_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float32 kf_downsample\n\
float32 kf_mask\n\
float32 kf_feature\n\
float32 sbi\n\
float32 motion\n\
float32 pvs\n\
float32 shuffle\n\
float32 coarse\n\
float32 fine\n\
float32 pose\n\
float32 depth\n\
float32 add\n\
float32 total\n\
int32 map_num_mkfs\n\
int32 map_num_points\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::mcptam::TrackerTiming_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcptam::TrackerTiming_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.kf_downsample);
      stream.next(m.kf_mask);
      stream.next(m.kf_feature);
      stream.next(m.sbi);
      stream.next(m.motion);
      stream.next(m.pvs);
      stream.next(m.shuffle);
      stream.next(m.coarse);
      stream.next(m.fine);
      stream.next(m.pose);
      stream.next(m.depth);
      stream.next(m.add);
      stream.next(m.total);
      stream.next(m.map_num_mkfs);
      stream.next(m.map_num_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackerTiming_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcptam::TrackerTiming_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcptam::TrackerTiming_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "kf_downsample: ";
    Printer<float>::stream(s, indent + "  ", v.kf_downsample);
    s << indent << "kf_mask: ";
    Printer<float>::stream(s, indent + "  ", v.kf_mask);
    s << indent << "kf_feature: ";
    Printer<float>::stream(s, indent + "  ", v.kf_feature);
    s << indent << "sbi: ";
    Printer<float>::stream(s, indent + "  ", v.sbi);
    s << indent << "motion: ";
    Printer<float>::stream(s, indent + "  ", v.motion);
    s << indent << "pvs: ";
    Printer<float>::stream(s, indent + "  ", v.pvs);
    s << indent << "shuffle: ";
    Printer<float>::stream(s, indent + "  ", v.shuffle);
    s << indent << "coarse: ";
    Printer<float>::stream(s, indent + "  ", v.coarse);
    s << indent << "fine: ";
    Printer<float>::stream(s, indent + "  ", v.fine);
    s << indent << "pose: ";
    Printer<float>::stream(s, indent + "  ", v.pose);
    s << indent << "depth: ";
    Printer<float>::stream(s, indent + "  ", v.depth);
    s << indent << "add: ";
    Printer<float>::stream(s, indent + "  ", v.add);
    s << indent << "total: ";
    Printer<float>::stream(s, indent + "  ", v.total);
    s << indent << "map_num_mkfs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.map_num_mkfs);
    s << indent << "map_num_points: ";
    Printer<int32_t>::stream(s, indent + "  ", v.map_num_points);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCPTAM_MESSAGE_TRACKERTIMING_H
