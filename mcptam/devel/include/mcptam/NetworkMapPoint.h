// Generated by gencpp from file mcptam/NetworkMapPoint.msg
// DO NOT EDIT!


#ifndef MCPTAM_MESSAGE_NETWORKMAPPOINT_H
#define MCPTAM_MESSAGE_NETWORKMAPPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mcptam
{
template <class ContainerAllocator>
struct NetworkMapPoint_
{
  typedef NetworkMapPoint_<ContainerAllocator> Type;

  NetworkMapPoint_()
    : mv3WorldPos()
    , mnSourceLevel(0)
    , mv3PixelRight_W()
    , mv3PixelDown_W()
    , mirCenter()
    , mId()
    , mSourceId()
    , mSourceCamName()
    , mbFixed(false)
    , mbOptimized(false)  {
      mirCenter.assign(0.0);
  }
  NetworkMapPoint_(const ContainerAllocator& _alloc)
    : mv3WorldPos(_alloc)
    , mnSourceLevel(0)
    , mv3PixelRight_W(_alloc)
    , mv3PixelDown_W(_alloc)
    , mirCenter()
    , mId(_alloc)
    , mSourceId(_alloc)
    , mSourceCamName(_alloc)
    , mbFixed(false)
    , mbOptimized(false)  {
  (void)_alloc;
      mirCenter.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mv3WorldPos_type;
  _mv3WorldPos_type mv3WorldPos;

   typedef uint8_t _mnSourceLevel_type;
  _mnSourceLevel_type mnSourceLevel;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mv3PixelRight_W_type;
  _mv3PixelRight_W_type mv3PixelRight_W;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mv3PixelDown_W_type;
  _mv3PixelDown_W_type mv3PixelDown_W;

   typedef boost::array<double, 2>  _mirCenter_type;
  _mirCenter_type mirCenter;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mId_type;
  _mId_type mId;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mSourceId_type;
  _mSourceId_type mSourceId;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mSourceCamName_type;
  _mSourceCamName_type mSourceCamName;

   typedef uint8_t _mbFixed_type;
  _mbFixed_type mbFixed;

   typedef uint8_t _mbOptimized_type;
  _mbOptimized_type mbOptimized;




  typedef boost::shared_ptr< ::mcptam::NetworkMapPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcptam::NetworkMapPoint_<ContainerAllocator> const> ConstPtr;

}; // struct NetworkMapPoint_

typedef ::mcptam::NetworkMapPoint_<std::allocator<void> > NetworkMapPoint;

typedef boost::shared_ptr< ::mcptam::NetworkMapPoint > NetworkMapPointPtr;
typedef boost::shared_ptr< ::mcptam::NetworkMapPoint const> NetworkMapPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcptam::NetworkMapPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcptam::NetworkMapPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mcptam

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'mcptam': ['/home/vgrlab/catkin_ws/src/mcptam/msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mcptam::NetworkMapPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcptam::NetworkMapPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcptam::NetworkMapPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcptam::NetworkMapPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcptam::NetworkMapPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcptam::NetworkMapPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcptam::NetworkMapPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95dfc98be55d6b5904b3e3f286403802";
  }

  static const char* value(const ::mcptam::NetworkMapPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95dfc98be55d6b59ULL;
  static const uint64_t static_value2 = 0x04b3e3f286403802ULL;
};

template<class ContainerAllocator>
struct DataType< ::mcptam::NetworkMapPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcptam/NetworkMapPoint";
  }

  static const char* value(const ::mcptam::NetworkMapPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcptam::NetworkMapPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string mv3WorldPos\n\
uint8 mnSourceLevel\n\
string mv3PixelRight_W\n\
string mv3PixelDown_W\n\
float64[2] mirCenter\n\
string mId\n\
string mSourceId\n\
string mSourceCamName\n\
bool mbFixed\n\
bool mbOptimized\n\
";
  }

  static const char* value(const ::mcptam::NetworkMapPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcptam::NetworkMapPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mv3WorldPos);
      stream.next(m.mnSourceLevel);
      stream.next(m.mv3PixelRight_W);
      stream.next(m.mv3PixelDown_W);
      stream.next(m.mirCenter);
      stream.next(m.mId);
      stream.next(m.mSourceId);
      stream.next(m.mSourceCamName);
      stream.next(m.mbFixed);
      stream.next(m.mbOptimized);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NetworkMapPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcptam::NetworkMapPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcptam::NetworkMapPoint_<ContainerAllocator>& v)
  {
    s << indent << "mv3WorldPos: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mv3WorldPos);
    s << indent << "mnSourceLevel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mnSourceLevel);
    s << indent << "mv3PixelRight_W: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mv3PixelRight_W);
    s << indent << "mv3PixelDown_W: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mv3PixelDown_W);
    s << indent << "mirCenter[]" << std::endl;
    for (size_t i = 0; i < v.mirCenter.size(); ++i)
    {
      s << indent << "  mirCenter[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.mirCenter[i]);
    }
    s << indent << "mId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mId);
    s << indent << "mSourceId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mSourceId);
    s << indent << "mSourceCamName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mSourceCamName);
    s << indent << "mbFixed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mbFixed);
    s << indent << "mbOptimized: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mbOptimized);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCPTAM_MESSAGE_NETWORKMAPPOINT_H
