# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mcptam/NetworkMapPoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NetworkMapPoint(genpy.Message):
  _md5sum = "95dfc98be55d6b5904b3e3f286403802"
  _type = "mcptam/NetworkMapPoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string mv3WorldPos
uint8 mnSourceLevel
string mv3PixelRight_W
string mv3PixelDown_W
float64[2] mirCenter
string mId
string mSourceId
string mSourceCamName
bool mbFixed
bool mbOptimized
"""
  __slots__ = ['mv3WorldPos','mnSourceLevel','mv3PixelRight_W','mv3PixelDown_W','mirCenter','mId','mSourceId','mSourceCamName','mbFixed','mbOptimized']
  _slot_types = ['string','uint8','string','string','float64[2]','string','string','string','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mv3WorldPos,mnSourceLevel,mv3PixelRight_W,mv3PixelDown_W,mirCenter,mId,mSourceId,mSourceCamName,mbFixed,mbOptimized

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NetworkMapPoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mv3WorldPos is None:
        self.mv3WorldPos = ''
      if self.mnSourceLevel is None:
        self.mnSourceLevel = 0
      if self.mv3PixelRight_W is None:
        self.mv3PixelRight_W = ''
      if self.mv3PixelDown_W is None:
        self.mv3PixelDown_W = ''
      if self.mirCenter is None:
        self.mirCenter = [0.,0.]
      if self.mId is None:
        self.mId = ''
      if self.mSourceId is None:
        self.mSourceId = ''
      if self.mSourceCamName is None:
        self.mSourceCamName = ''
      if self.mbFixed is None:
        self.mbFixed = False
      if self.mbOptimized is None:
        self.mbOptimized = False
    else:
      self.mv3WorldPos = ''
      self.mnSourceLevel = 0
      self.mv3PixelRight_W = ''
      self.mv3PixelDown_W = ''
      self.mirCenter = [0.,0.]
      self.mId = ''
      self.mSourceId = ''
      self.mSourceCamName = ''
      self.mbFixed = False
      self.mbOptimized = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.mv3WorldPos
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.mnSourceLevel))
      _x = self.mv3PixelRight_W
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mv3PixelDown_W
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_2d.pack(*self.mirCenter))
      _x = self.mId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mSourceId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mSourceCamName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2B.pack(_x.mbFixed, _x.mbOptimized))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mv3WorldPos = str[start:end].decode('utf-8')
      else:
        self.mv3WorldPos = str[start:end]
      start = end
      end += 1
      (self.mnSourceLevel,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mv3PixelRight_W = str[start:end].decode('utf-8')
      else:
        self.mv3PixelRight_W = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mv3PixelDown_W = str[start:end].decode('utf-8')
      else:
        self.mv3PixelDown_W = str[start:end]
      start = end
      end += 16
      self.mirCenter = _struct_2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mId = str[start:end].decode('utf-8')
      else:
        self.mId = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mSourceId = str[start:end].decode('utf-8')
      else:
        self.mSourceId = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mSourceCamName = str[start:end].decode('utf-8')
      else:
        self.mSourceCamName = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.mbFixed, _x.mbOptimized,) = _struct_2B.unpack(str[start:end])
      self.mbFixed = bool(self.mbFixed)
      self.mbOptimized = bool(self.mbOptimized)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.mv3WorldPos
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.mnSourceLevel))
      _x = self.mv3PixelRight_W
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mv3PixelDown_W
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.mirCenter.tostring())
      _x = self.mId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mSourceId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mSourceCamName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2B.pack(_x.mbFixed, _x.mbOptimized))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mv3WorldPos = str[start:end].decode('utf-8')
      else:
        self.mv3WorldPos = str[start:end]
      start = end
      end += 1
      (self.mnSourceLevel,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mv3PixelRight_W = str[start:end].decode('utf-8')
      else:
        self.mv3PixelRight_W = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mv3PixelDown_W = str[start:end].decode('utf-8')
      else:
        self.mv3PixelDown_W = str[start:end]
      start = end
      end += 16
      self.mirCenter = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mId = str[start:end].decode('utf-8')
      else:
        self.mId = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mSourceId = str[start:end].decode('utf-8')
      else:
        self.mSourceId = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mSourceCamName = str[start:end].decode('utf-8')
      else:
        self.mSourceCamName = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.mbFixed, _x.mbOptimized,) = _struct_2B.unpack(str[start:end])
      self.mbFixed = bool(self.mbFixed)
      self.mbOptimized = bool(self.mbOptimized)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_B = struct.Struct("<B")
_struct_2B = struct.Struct("<2B")
