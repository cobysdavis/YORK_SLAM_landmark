# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mcptam/ModifyMapRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_msgs.msg
import mcptam.msg
import std_msgs.msg

class ModifyMapRequest(genpy.Message):
  _md5sum = "1be0fa0c498e38e46f183191c3d25f79"
  _type = "mcptam/ModifyMapRequest"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
NetworkMapPoint[] mvPoints
NetworkMultiKeyFrame[] mvMultiKeyFrames
NetworkOutlier[] mvOutliers
uint8 mState
float64 mdMaxCov

uint8 action
uint8 ADD=1
uint8 UPDATE=2
uint8 DELETE=3
uint8 OUTLIERS=4
uint8 INIT=5
uint8 RESET=6
uint8 STATE=7

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: mcptam/NetworkMapPoint
string mv3WorldPos
uint8 mnSourceLevel
string mv3PixelRight_W
string mv3PixelDown_W
float64[2] mirCenter
string mId
string mSourceId
string mSourceCamName
bool mbFixed
bool mbOptimized

================================================================================
MSG: mcptam/NetworkMultiKeyFrame
string mse3BaseFromWorld
NetworkKeyFrame[] mvKeyFrames
bool mbFixed
float64 mdTotalDepthMean
string mId

================================================================================
MSG: mcptam/NetworkKeyFrame
string mse3CamFromBase
string mse3CamFromWorld
sensor_msgs/Image image
sensor_msgs/Image mask
NetworkMeasurement[] mvMeasurements
float64 mdSceneDepthMean
float64 mdSceneDepthSigma
string mCamName
string mParentId


================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: mcptam/NetworkMeasurement
uint8 nLevel
bool bSubPix
float64[2] v2RootPos
uint8 eSource
string mapPointId

================================================================================
MSG: mcptam/NetworkOutlier
string mMKFId
string mCamName
string mapPointId

"""
  # Pseudo-constants
  ADD = 1
  UPDATE = 2
  DELETE = 3
  OUTLIERS = 4
  INIT = 5
  RESET = 6
  STATE = 7

  __slots__ = ['header','mvPoints','mvMultiKeyFrames','mvOutliers','mState','mdMaxCov','action']
  _slot_types = ['std_msgs/Header','mcptam/NetworkMapPoint[]','mcptam/NetworkMultiKeyFrame[]','mcptam/NetworkOutlier[]','uint8','float64','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,mvPoints,mvMultiKeyFrames,mvOutliers,mState,mdMaxCov,action

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ModifyMapRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mvPoints is None:
        self.mvPoints = []
      if self.mvMultiKeyFrames is None:
        self.mvMultiKeyFrames = []
      if self.mvOutliers is None:
        self.mvOutliers = []
      if self.mState is None:
        self.mState = 0
      if self.mdMaxCov is None:
        self.mdMaxCov = 0.
      if self.action is None:
        self.action = 0
    else:
      self.header = std_msgs.msg.Header()
      self.mvPoints = []
      self.mvMultiKeyFrames = []
      self.mvOutliers = []
      self.mState = 0
      self.mdMaxCov = 0.
      self.action = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.mvPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.mvPoints:
        _x = val1.mv3WorldPos
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(val1.mnSourceLevel))
        _x = val1.mv3PixelRight_W
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.mv3PixelDown_W
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_2d.pack(*val1.mirCenter))
        _x = val1.mId
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.mSourceId
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.mSourceCamName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2B.pack(_x.mbFixed, _x.mbOptimized))
      length = len(self.mvMultiKeyFrames)
      buff.write(_struct_I.pack(length))
      for val1 in self.mvMultiKeyFrames:
        _x = val1.mse3BaseFromWorld
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.mvKeyFrames)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mvKeyFrames:
          _x = val2.mse3CamFromBase
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.mse3CamFromWorld
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v1 = val2.image
          _v2 = _v1.header
          buff.write(_struct_I.pack(_v2.seq))
          _v3 = _v2.stamp
          _x = _v3
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v2.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = _v1
          buff.write(_struct_2I.pack(_x.height, _x.width))
          _x = _v1.encoding
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = _v1
          buff.write(_struct_BI.pack(_x.is_bigendian, _x.step))
          _x = _v1.data
          length = len(_x)
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v4 = val2.mask
          _v5 = _v4.header
          buff.write(_struct_I.pack(_v5.seq))
          _v6 = _v5.stamp
          _x = _v6
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v5.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = _v4
          buff.write(_struct_2I.pack(_x.height, _x.width))
          _x = _v4.encoding
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = _v4
          buff.write(_struct_BI.pack(_x.is_bigendian, _x.step))
          _x = _v4.data
          length = len(_x)
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.mvMeasurements)
          buff.write(_struct_I.pack(length))
          for val3 in val2.mvMeasurements:
            _x = val3
            buff.write(_struct_2B.pack(_x.nLevel, _x.bSubPix))
            buff.write(_struct_2d.pack(*val3.v2RootPos))
            buff.write(_struct_B.pack(val3.eSource))
            _x = val3.mapPointId
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *_x))
            else:
              buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_2d.pack(_x.mdSceneDepthMean, _x.mdSceneDepthSigma))
          _x = val2.mCamName
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.mParentId
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_Bd.pack(_x.mbFixed, _x.mdTotalDepthMean))
        _x = val1.mId
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.mvOutliers)
      buff.write(_struct_I.pack(length))
      for val1 in self.mvOutliers:
        _x = val1.mMKFId
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.mCamName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.mapPointId
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BdB.pack(_x.mState, _x.mdMaxCov, _x.action))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mvPoints is None:
        self.mvPoints = None
      if self.mvMultiKeyFrames is None:
        self.mvMultiKeyFrames = None
      if self.mvOutliers is None:
        self.mvOutliers = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mvPoints = []
      for i in range(0, length):
        val1 = mcptam.msg.NetworkMapPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mv3WorldPos = str[start:end].decode('utf-8')
        else:
          val1.mv3WorldPos = str[start:end]
        start = end
        end += 1
        (val1.mnSourceLevel,) = _struct_B.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mv3PixelRight_W = str[start:end].decode('utf-8')
        else:
          val1.mv3PixelRight_W = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mv3PixelDown_W = str[start:end].decode('utf-8')
        else:
          val1.mv3PixelDown_W = str[start:end]
        start = end
        end += 16
        val1.mirCenter = _struct_2d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mId = str[start:end].decode('utf-8')
        else:
          val1.mId = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mSourceId = str[start:end].decode('utf-8')
        else:
          val1.mSourceId = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mSourceCamName = str[start:end].decode('utf-8')
        else:
          val1.mSourceCamName = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.mbFixed, _x.mbOptimized,) = _struct_2B.unpack(str[start:end])
        val1.mbFixed = bool(val1.mbFixed)
        val1.mbOptimized = bool(val1.mbOptimized)
        self.mvPoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mvMultiKeyFrames = []
      for i in range(0, length):
        val1 = mcptam.msg.NetworkMultiKeyFrame()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mse3BaseFromWorld = str[start:end].decode('utf-8')
        else:
          val1.mse3BaseFromWorld = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mvKeyFrames = []
        for i in range(0, length):
          val2 = mcptam.msg.NetworkKeyFrame()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.mse3CamFromBase = str[start:end].decode('utf-8')
          else:
            val2.mse3CamFromBase = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.mse3CamFromWorld = str[start:end].decode('utf-8')
          else:
            val2.mse3CamFromWorld = str[start:end]
          _v7 = val2.image
          _v8 = _v7.header
          start = end
          end += 4
          (_v8.seq,) = _struct_I.unpack(str[start:end])
          _v9 = _v8.stamp
          _x = _v9
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v8.frame_id = str[start:end].decode('utf-8')
          else:
            _v8.frame_id = str[start:end]
          _x = _v7
          start = end
          end += 8
          (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v7.encoding = str[start:end].decode('utf-8')
          else:
            _v7.encoding = str[start:end]
          _x = _v7
          start = end
          end += 5
          (_x.is_bigendian, _x.step,) = _struct_BI.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          _v7.data = str[start:end]
          _v10 = val2.mask
          _v11 = _v10.header
          start = end
          end += 4
          (_v11.seq,) = _struct_I.unpack(str[start:end])
          _v12 = _v11.stamp
          _x = _v12
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v11.frame_id = str[start:end].decode('utf-8')
          else:
            _v11.frame_id = str[start:end]
          _x = _v10
          start = end
          end += 8
          (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v10.encoding = str[start:end].decode('utf-8')
          else:
            _v10.encoding = str[start:end]
          _x = _v10
          start = end
          end += 5
          (_x.is_bigendian, _x.step,) = _struct_BI.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          _v10.data = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.mvMeasurements = []
          for i in range(0, length):
            val3 = mcptam.msg.NetworkMeasurement()
            _x = val3
            start = end
            end += 2
            (_x.nLevel, _x.bSubPix,) = _struct_2B.unpack(str[start:end])
            val3.bSubPix = bool(val3.bSubPix)
            start = end
            end += 16
            val3.v2RootPos = _struct_2d.unpack(str[start:end])
            start = end
            end += 1
            (val3.eSource,) = _struct_B.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.mapPointId = str[start:end].decode('utf-8')
            else:
              val3.mapPointId = str[start:end]
            val2.mvMeasurements.append(val3)
          _x = val2
          start = end
          end += 16
          (_x.mdSceneDepthMean, _x.mdSceneDepthSigma,) = _struct_2d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.mCamName = str[start:end].decode('utf-8')
          else:
            val2.mCamName = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.mParentId = str[start:end].decode('utf-8')
          else:
            val2.mParentId = str[start:end]
          val1.mvKeyFrames.append(val2)
        _x = val1
        start = end
        end += 9
        (_x.mbFixed, _x.mdTotalDepthMean,) = _struct_Bd.unpack(str[start:end])
        val1.mbFixed = bool(val1.mbFixed)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mId = str[start:end].decode('utf-8')
        else:
          val1.mId = str[start:end]
        self.mvMultiKeyFrames.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mvOutliers = []
      for i in range(0, length):
        val1 = mcptam.msg.NetworkOutlier()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mMKFId = str[start:end].decode('utf-8')
        else:
          val1.mMKFId = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mCamName = str[start:end].decode('utf-8')
        else:
          val1.mCamName = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mapPointId = str[start:end].decode('utf-8')
        else:
          val1.mapPointId = str[start:end]
        self.mvOutliers.append(val1)
      _x = self
      start = end
      end += 10
      (_x.mState, _x.mdMaxCov, _x.action,) = _struct_BdB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.mvPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.mvPoints:
        _x = val1.mv3WorldPos
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(val1.mnSourceLevel))
        _x = val1.mv3PixelRight_W
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.mv3PixelDown_W
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(val1.mirCenter.tostring())
        _x = val1.mId
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.mSourceId
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.mSourceCamName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2B.pack(_x.mbFixed, _x.mbOptimized))
      length = len(self.mvMultiKeyFrames)
      buff.write(_struct_I.pack(length))
      for val1 in self.mvMultiKeyFrames:
        _x = val1.mse3BaseFromWorld
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.mvKeyFrames)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mvKeyFrames:
          _x = val2.mse3CamFromBase
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.mse3CamFromWorld
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v13 = val2.image
          _v14 = _v13.header
          buff.write(_struct_I.pack(_v14.seq))
          _v15 = _v14.stamp
          _x = _v15
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v14.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = _v13
          buff.write(_struct_2I.pack(_x.height, _x.width))
          _x = _v13.encoding
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = _v13
          buff.write(_struct_BI.pack(_x.is_bigendian, _x.step))
          _x = _v13.data
          length = len(_x)
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v16 = val2.mask
          _v17 = _v16.header
          buff.write(_struct_I.pack(_v17.seq))
          _v18 = _v17.stamp
          _x = _v18
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v17.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = _v16
          buff.write(_struct_2I.pack(_x.height, _x.width))
          _x = _v16.encoding
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = _v16
          buff.write(_struct_BI.pack(_x.is_bigendian, _x.step))
          _x = _v16.data
          length = len(_x)
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.mvMeasurements)
          buff.write(_struct_I.pack(length))
          for val3 in val2.mvMeasurements:
            _x = val3
            buff.write(_struct_2B.pack(_x.nLevel, _x.bSubPix))
            buff.write(val3.v2RootPos.tostring())
            buff.write(_struct_B.pack(val3.eSource))
            _x = val3.mapPointId
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *_x))
            else:
              buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_2d.pack(_x.mdSceneDepthMean, _x.mdSceneDepthSigma))
          _x = val2.mCamName
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.mParentId
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_Bd.pack(_x.mbFixed, _x.mdTotalDepthMean))
        _x = val1.mId
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.mvOutliers)
      buff.write(_struct_I.pack(length))
      for val1 in self.mvOutliers:
        _x = val1.mMKFId
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.mCamName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.mapPointId
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BdB.pack(_x.mState, _x.mdMaxCov, _x.action))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mvPoints is None:
        self.mvPoints = None
      if self.mvMultiKeyFrames is None:
        self.mvMultiKeyFrames = None
      if self.mvOutliers is None:
        self.mvOutliers = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mvPoints = []
      for i in range(0, length):
        val1 = mcptam.msg.NetworkMapPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mv3WorldPos = str[start:end].decode('utf-8')
        else:
          val1.mv3WorldPos = str[start:end]
        start = end
        end += 1
        (val1.mnSourceLevel,) = _struct_B.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mv3PixelRight_W = str[start:end].decode('utf-8')
        else:
          val1.mv3PixelRight_W = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mv3PixelDown_W = str[start:end].decode('utf-8')
        else:
          val1.mv3PixelDown_W = str[start:end]
        start = end
        end += 16
        val1.mirCenter = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mId = str[start:end].decode('utf-8')
        else:
          val1.mId = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mSourceId = str[start:end].decode('utf-8')
        else:
          val1.mSourceId = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mSourceCamName = str[start:end].decode('utf-8')
        else:
          val1.mSourceCamName = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.mbFixed, _x.mbOptimized,) = _struct_2B.unpack(str[start:end])
        val1.mbFixed = bool(val1.mbFixed)
        val1.mbOptimized = bool(val1.mbOptimized)
        self.mvPoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mvMultiKeyFrames = []
      for i in range(0, length):
        val1 = mcptam.msg.NetworkMultiKeyFrame()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mse3BaseFromWorld = str[start:end].decode('utf-8')
        else:
          val1.mse3BaseFromWorld = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mvKeyFrames = []
        for i in range(0, length):
          val2 = mcptam.msg.NetworkKeyFrame()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.mse3CamFromBase = str[start:end].decode('utf-8')
          else:
            val2.mse3CamFromBase = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.mse3CamFromWorld = str[start:end].decode('utf-8')
          else:
            val2.mse3CamFromWorld = str[start:end]
          _v19 = val2.image
          _v20 = _v19.header
          start = end
          end += 4
          (_v20.seq,) = _struct_I.unpack(str[start:end])
          _v21 = _v20.stamp
          _x = _v21
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v20.frame_id = str[start:end].decode('utf-8')
          else:
            _v20.frame_id = str[start:end]
          _x = _v19
          start = end
          end += 8
          (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v19.encoding = str[start:end].decode('utf-8')
          else:
            _v19.encoding = str[start:end]
          _x = _v19
          start = end
          end += 5
          (_x.is_bigendian, _x.step,) = _struct_BI.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          _v19.data = str[start:end]
          _v22 = val2.mask
          _v23 = _v22.header
          start = end
          end += 4
          (_v23.seq,) = _struct_I.unpack(str[start:end])
          _v24 = _v23.stamp
          _x = _v24
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v23.frame_id = str[start:end].decode('utf-8')
          else:
            _v23.frame_id = str[start:end]
          _x = _v22
          start = end
          end += 8
          (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v22.encoding = str[start:end].decode('utf-8')
          else:
            _v22.encoding = str[start:end]
          _x = _v22
          start = end
          end += 5
          (_x.is_bigendian, _x.step,) = _struct_BI.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          _v22.data = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.mvMeasurements = []
          for i in range(0, length):
            val3 = mcptam.msg.NetworkMeasurement()
            _x = val3
            start = end
            end += 2
            (_x.nLevel, _x.bSubPix,) = _struct_2B.unpack(str[start:end])
            val3.bSubPix = bool(val3.bSubPix)
            start = end
            end += 16
            val3.v2RootPos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
            start = end
            end += 1
            (val3.eSource,) = _struct_B.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.mapPointId = str[start:end].decode('utf-8')
            else:
              val3.mapPointId = str[start:end]
            val2.mvMeasurements.append(val3)
          _x = val2
          start = end
          end += 16
          (_x.mdSceneDepthMean, _x.mdSceneDepthSigma,) = _struct_2d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.mCamName = str[start:end].decode('utf-8')
          else:
            val2.mCamName = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.mParentId = str[start:end].decode('utf-8')
          else:
            val2.mParentId = str[start:end]
          val1.mvKeyFrames.append(val2)
        _x = val1
        start = end
        end += 9
        (_x.mbFixed, _x.mdTotalDepthMean,) = _struct_Bd.unpack(str[start:end])
        val1.mbFixed = bool(val1.mbFixed)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mId = str[start:end].decode('utf-8')
        else:
          val1.mId = str[start:end]
        self.mvMultiKeyFrames.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mvOutliers = []
      for i in range(0, length):
        val1 = mcptam.msg.NetworkOutlier()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mMKFId = str[start:end].decode('utf-8')
        else:
          val1.mMKFId = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mCamName = str[start:end].decode('utf-8')
        else:
          val1.mCamName = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mapPointId = str[start:end].decode('utf-8')
        else:
          val1.mapPointId = str[start:end]
        self.mvOutliers.append(val1)
      _x = self
      start = end
      end += 10
      (_x.mState, _x.mdMaxCov, _x.action,) = _struct_BdB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Bd = struct.Struct("<Bd")
_struct_B = struct.Struct("<B")
_struct_BdB = struct.Struct("<BdB")
_struct_BI = struct.Struct("<BI")
_struct_2d = struct.Struct("<2d")
_struct_3I = struct.Struct("<3I")
_struct_2B = struct.Struct("<2B")
_struct_2I = struct.Struct("<2I")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mcptam/ModifyMapResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ModifyMapResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "mcptam/ModifyMapResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success

"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ModifyMapResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class ModifyMap(object):
  _type          = 'mcptam/ModifyMap'
  _md5sum = 'fa7bdbefce6df3cb1fff6a1c781fb2bc'
  _request_class  = ModifyMapRequest
  _response_class = ModifyMapResponse
