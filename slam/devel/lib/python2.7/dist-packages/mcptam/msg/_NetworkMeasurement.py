# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mcptam/NetworkMeasurement.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NetworkMeasurement(genpy.Message):
  _md5sum = "a6beed70fe5b9a4435fd44bc9deb3fa1"
  _type = "mcptam/NetworkMeasurement"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 nLevel
bool bSubPix
float64[2] v2RootPos
uint8 eSource
string mapPointId
"""
  __slots__ = ['nLevel','bSubPix','v2RootPos','eSource','mapPointId']
  _slot_types = ['uint8','bool','float64[2]','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nLevel,bSubPix,v2RootPos,eSource,mapPointId

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NetworkMeasurement, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nLevel is None:
        self.nLevel = 0
      if self.bSubPix is None:
        self.bSubPix = False
      if self.v2RootPos is None:
        self.v2RootPos = [0.,0.]
      if self.eSource is None:
        self.eSource = 0
      if self.mapPointId is None:
        self.mapPointId = ''
    else:
      self.nLevel = 0
      self.bSubPix = False
      self.v2RootPos = [0.,0.]
      self.eSource = 0
      self.mapPointId = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.nLevel, _x.bSubPix))
      buff.write(_struct_2d.pack(*self.v2RootPos))
      buff.write(_struct_B.pack(self.eSource))
      _x = self.mapPointId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.nLevel, _x.bSubPix,) = _struct_2B.unpack(str[start:end])
      self.bSubPix = bool(self.bSubPix)
      start = end
      end += 16
      self.v2RootPos = _struct_2d.unpack(str[start:end])
      start = end
      end += 1
      (self.eSource,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mapPointId = str[start:end].decode('utf-8')
      else:
        self.mapPointId = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.nLevel, _x.bSubPix))
      buff.write(self.v2RootPos.tostring())
      buff.write(_struct_B.pack(self.eSource))
      _x = self.mapPointId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.nLevel, _x.bSubPix,) = _struct_2B.unpack(str[start:end])
      self.bSubPix = bool(self.bSubPix)
      start = end
      end += 16
      self.v2RootPos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 1
      (self.eSource,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mapPointId = str[start:end].decode('utf-8')
      else:
        self.mapPointId = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_B = struct.Struct("<B")
_struct_2B = struct.Struct("<2B")
