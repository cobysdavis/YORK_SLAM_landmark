# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mcptam/TrackerTiming.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class TrackerTiming(genpy.Message):
  _md5sum = "e38bbb76e830094ff670d4df851e26a3"
  _type = "mcptam/TrackerTiming"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
float32 kf_downsample
float32 kf_mask
float32 kf_feature
float32 sbi
float32 motion
float32 pvs
float32 shuffle
float32 coarse
float32 fine
float32 pose
float32 depth
float32 add
float32 total
int32 map_num_mkfs
int32 map_num_points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','kf_downsample','kf_mask','kf_feature','sbi','motion','pvs','shuffle','coarse','fine','pose','depth','add','total','map_num_mkfs','map_num_points']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,kf_downsample,kf_mask,kf_feature,sbi,motion,pvs,shuffle,coarse,fine,pose,depth,add,total,map_num_mkfs,map_num_points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackerTiming, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.kf_downsample is None:
        self.kf_downsample = 0.
      if self.kf_mask is None:
        self.kf_mask = 0.
      if self.kf_feature is None:
        self.kf_feature = 0.
      if self.sbi is None:
        self.sbi = 0.
      if self.motion is None:
        self.motion = 0.
      if self.pvs is None:
        self.pvs = 0.
      if self.shuffle is None:
        self.shuffle = 0.
      if self.coarse is None:
        self.coarse = 0.
      if self.fine is None:
        self.fine = 0.
      if self.pose is None:
        self.pose = 0.
      if self.depth is None:
        self.depth = 0.
      if self.add is None:
        self.add = 0.
      if self.total is None:
        self.total = 0.
      if self.map_num_mkfs is None:
        self.map_num_mkfs = 0
      if self.map_num_points is None:
        self.map_num_points = 0
    else:
      self.header = std_msgs.msg.Header()
      self.kf_downsample = 0.
      self.kf_mask = 0.
      self.kf_feature = 0.
      self.sbi = 0.
      self.motion = 0.
      self.pvs = 0.
      self.shuffle = 0.
      self.coarse = 0.
      self.fine = 0.
      self.pose = 0.
      self.depth = 0.
      self.add = 0.
      self.total = 0.
      self.map_num_mkfs = 0
      self.map_num_points = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13f2i.pack(_x.kf_downsample, _x.kf_mask, _x.kf_feature, _x.sbi, _x.motion, _x.pvs, _x.shuffle, _x.coarse, _x.fine, _x.pose, _x.depth, _x.add, _x.total, _x.map_num_mkfs, _x.map_num_points))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.kf_downsample, _x.kf_mask, _x.kf_feature, _x.sbi, _x.motion, _x.pvs, _x.shuffle, _x.coarse, _x.fine, _x.pose, _x.depth, _x.add, _x.total, _x.map_num_mkfs, _x.map_num_points,) = _struct_13f2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13f2i.pack(_x.kf_downsample, _x.kf_mask, _x.kf_feature, _x.sbi, _x.motion, _x.pvs, _x.shuffle, _x.coarse, _x.fine, _x.pose, _x.depth, _x.add, _x.total, _x.map_num_mkfs, _x.map_num_points))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.kf_downsample, _x.kf_mask, _x.kf_feature, _x.sbi, _x.motion, _x.pvs, _x.shuffle, _x.coarse, _x.fine, _x.pose, _x.depth, _x.add, _x.total, _x.map_num_mkfs, _x.map_num_points,) = _struct_13f2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_13f2i = struct.Struct("<13f2i")
