// Generated by gencpp from file mcptam/NetworkOutlier.msg
// DO NOT EDIT!


#ifndef MCPTAM_MESSAGE_NETWORKOUTLIER_H
#define MCPTAM_MESSAGE_NETWORKOUTLIER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mcptam
{
template <class ContainerAllocator>
struct NetworkOutlier_
{
  typedef NetworkOutlier_<ContainerAllocator> Type;

  NetworkOutlier_()
    : mMKFId()
    , mCamName()
    , mapPointId()  {
    }
  NetworkOutlier_(const ContainerAllocator& _alloc)
    : mMKFId(_alloc)
    , mCamName(_alloc)
    , mapPointId(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mMKFId_type;
  _mMKFId_type mMKFId;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mCamName_type;
  _mCamName_type mCamName;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mapPointId_type;
  _mapPointId_type mapPointId;




  typedef boost::shared_ptr< ::mcptam::NetworkOutlier_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcptam::NetworkOutlier_<ContainerAllocator> const> ConstPtr;

}; // struct NetworkOutlier_

typedef ::mcptam::NetworkOutlier_<std::allocator<void> > NetworkOutlier;

typedef boost::shared_ptr< ::mcptam::NetworkOutlier > NetworkOutlierPtr;
typedef boost::shared_ptr< ::mcptam::NetworkOutlier const> NetworkOutlierConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcptam::NetworkOutlier_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcptam::NetworkOutlier_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mcptam

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'mcptam': ['/home/vgrlab/catkin_ws/src/mcptam/msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mcptam::NetworkOutlier_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcptam::NetworkOutlier_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcptam::NetworkOutlier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcptam::NetworkOutlier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcptam::NetworkOutlier_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcptam::NetworkOutlier_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcptam::NetworkOutlier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6204791cc9b8826d2fc05bb952aeebdb";
  }

  static const char* value(const ::mcptam::NetworkOutlier_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6204791cc9b8826dULL;
  static const uint64_t static_value2 = 0x2fc05bb952aeebdbULL;
};

template<class ContainerAllocator>
struct DataType< ::mcptam::NetworkOutlier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcptam/NetworkOutlier";
  }

  static const char* value(const ::mcptam::NetworkOutlier_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcptam::NetworkOutlier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string mMKFId\n\
string mCamName\n\
string mapPointId\n\
\n\
";
  }

  static const char* value(const ::mcptam::NetworkOutlier_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcptam::NetworkOutlier_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mMKFId);
      stream.next(m.mCamName);
      stream.next(m.mapPointId);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NetworkOutlier_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcptam::NetworkOutlier_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcptam::NetworkOutlier_<ContainerAllocator>& v)
  {
    s << indent << "mMKFId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mMKFId);
    s << indent << "mCamName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mCamName);
    s << indent << "mapPointId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mapPointId);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCPTAM_MESSAGE_NETWORKOUTLIER_H
