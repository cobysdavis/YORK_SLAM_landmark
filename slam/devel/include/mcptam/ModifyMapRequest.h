// Generated by gencpp from file mcptam/ModifyMapRequest.msg
// DO NOT EDIT!


#ifndef MCPTAM_MESSAGE_MODIFYMAPREQUEST_H
#define MCPTAM_MESSAGE_MODIFYMAPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <mcptam/NetworkMapPoint.h>
#include <mcptam/NetworkMultiKeyFrame.h>
#include <mcptam/NetworkOutlier.h>

namespace mcptam
{
template <class ContainerAllocator>
struct ModifyMapRequest_
{
  typedef ModifyMapRequest_<ContainerAllocator> Type;

  ModifyMapRequest_()
    : header()
    , mvPoints()
    , mvMultiKeyFrames()
    , mvOutliers()
    , mState(0)
    , mdMaxCov(0.0)
    , action(0)  {
    }
  ModifyMapRequest_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mvPoints(_alloc)
    , mvMultiKeyFrames(_alloc)
    , mvOutliers(_alloc)
    , mState(0)
    , mdMaxCov(0.0)
    , action(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::mcptam::NetworkMapPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mcptam::NetworkMapPoint_<ContainerAllocator> >::other >  _mvPoints_type;
  _mvPoints_type mvPoints;

   typedef std::vector< ::mcptam::NetworkMultiKeyFrame_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mcptam::NetworkMultiKeyFrame_<ContainerAllocator> >::other >  _mvMultiKeyFrames_type;
  _mvMultiKeyFrames_type mvMultiKeyFrames;

   typedef std::vector< ::mcptam::NetworkOutlier_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mcptam::NetworkOutlier_<ContainerAllocator> >::other >  _mvOutliers_type;
  _mvOutliers_type mvOutliers;

   typedef uint8_t _mState_type;
  _mState_type mState;

   typedef double _mdMaxCov_type;
  _mdMaxCov_type mdMaxCov;

   typedef uint8_t _action_type;
  _action_type action;


    enum { ADD = 1u };
     enum { UPDATE = 2u };
     enum { DELETE = 3u };
     enum { OUTLIERS = 4u };
     enum { INIT = 5u };
     enum { RESET = 6u };
     enum { STATE = 7u };
 

  typedef boost::shared_ptr< ::mcptam::ModifyMapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcptam::ModifyMapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ModifyMapRequest_

typedef ::mcptam::ModifyMapRequest_<std::allocator<void> > ModifyMapRequest;

typedef boost::shared_ptr< ::mcptam::ModifyMapRequest > ModifyMapRequestPtr;
typedef boost::shared_ptr< ::mcptam::ModifyMapRequest const> ModifyMapRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcptam::ModifyMapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcptam::ModifyMapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mcptam

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'mcptam': ['/home/vgrlab/catkin_ws/src/mcptam/msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mcptam::ModifyMapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcptam::ModifyMapRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcptam::ModifyMapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcptam::ModifyMapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcptam::ModifyMapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcptam::ModifyMapRequest_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcptam::ModifyMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1be0fa0c498e38e46f183191c3d25f79";
  }

  static const char* value(const ::mcptam::ModifyMapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1be0fa0c498e38e4ULL;
  static const uint64_t static_value2 = 0x6f183191c3d25f79ULL;
};

template<class ContainerAllocator>
struct DataType< ::mcptam::ModifyMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcptam/ModifyMapRequest";
  }

  static const char* value(const ::mcptam::ModifyMapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcptam::ModifyMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
NetworkMapPoint[] mvPoints\n\
NetworkMultiKeyFrame[] mvMultiKeyFrames\n\
NetworkOutlier[] mvOutliers\n\
uint8 mState\n\
float64 mdMaxCov\n\
\n\
uint8 action\n\
uint8 ADD=1\n\
uint8 UPDATE=2\n\
uint8 DELETE=3\n\
uint8 OUTLIERS=4\n\
uint8 INIT=5\n\
uint8 RESET=6\n\
uint8 STATE=7\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: mcptam/NetworkMapPoint\n\
string mv3WorldPos\n\
uint8 mnSourceLevel\n\
string mv3PixelRight_W\n\
string mv3PixelDown_W\n\
float64[2] mirCenter\n\
string mId\n\
string mSourceId\n\
string mSourceCamName\n\
bool mbFixed\n\
bool mbOptimized\n\
\n\
================================================================================\n\
MSG: mcptam/NetworkMultiKeyFrame\n\
string mse3BaseFromWorld\n\
NetworkKeyFrame[] mvKeyFrames\n\
bool mbFixed\n\
float64 mdTotalDepthMean\n\
string mId\n\
\n\
================================================================================\n\
MSG: mcptam/NetworkKeyFrame\n\
string mse3CamFromBase\n\
string mse3CamFromWorld\n\
sensor_msgs/Image image\n\
sensor_msgs/Image mask\n\
NetworkMeasurement[] mvMeasurements\n\
float64 mdSceneDepthMean\n\
float64 mdSceneDepthSigma\n\
string mCamName\n\
string mParentId\n\
\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: mcptam/NetworkMeasurement\n\
uint8 nLevel\n\
bool bSubPix\n\
float64[2] v2RootPos\n\
uint8 eSource\n\
string mapPointId\n\
\n\
================================================================================\n\
MSG: mcptam/NetworkOutlier\n\
string mMKFId\n\
string mCamName\n\
string mapPointId\n\
\n\
";
  }

  static const char* value(const ::mcptam::ModifyMapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcptam::ModifyMapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mvPoints);
      stream.next(m.mvMultiKeyFrames);
      stream.next(m.mvOutliers);
      stream.next(m.mState);
      stream.next(m.mdMaxCov);
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModifyMapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcptam::ModifyMapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcptam::ModifyMapRequest_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mvPoints[]" << std::endl;
    for (size_t i = 0; i < v.mvPoints.size(); ++i)
    {
      s << indent << "  mvPoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mcptam::NetworkMapPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.mvPoints[i]);
    }
    s << indent << "mvMultiKeyFrames[]" << std::endl;
    for (size_t i = 0; i < v.mvMultiKeyFrames.size(); ++i)
    {
      s << indent << "  mvMultiKeyFrames[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mcptam::NetworkMultiKeyFrame_<ContainerAllocator> >::stream(s, indent + "    ", v.mvMultiKeyFrames[i]);
    }
    s << indent << "mvOutliers[]" << std::endl;
    for (size_t i = 0; i < v.mvOutliers.size(); ++i)
    {
      s << indent << "  mvOutliers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mcptam::NetworkOutlier_<ContainerAllocator> >::stream(s, indent + "    ", v.mvOutliers[i]);
    }
    s << indent << "mState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mState);
    s << indent << "mdMaxCov: ";
    Printer<double>::stream(s, indent + "  ", v.mdMaxCov);
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCPTAM_MESSAGE_MODIFYMAPREQUEST_H
