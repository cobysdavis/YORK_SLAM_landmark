#!/usr/bin/env python
import rospy
from sensor_msgs.msg import PointCloud2
from geometry_msgs.msg import Point
from std_msgs.msg import Header
from std_srvs.srv import Empty
import sensor_msgs.point_cloud2 as pc2
from mcptam.srv import FilterPC,FilterPCResponse,FilterPCRequest
class Config:

	def __init__(self,max,min):
		self.cloud=[]
		self.max=Point()
		self.min=Point()
		self.header=Header()
		self.header.seq=0
		self.header.stamp=rospy.Time.now()
		self.header.frame_id="filter"
		self.max.x=max[0]
		self.max.y=max[1]
		self.max.z=max[2]
		self.min.x=min[0]
		self.min.y=min[1]
		self.min.z=min[2]
	def callback(self,data):	

		#define cloud in readable format and save to obejct field		
		self.cloud=[]
		for p in pc2.read_points(data,field_names=("x","y","z"),skip_nans=True):
			#print "x : %f y : %f z : %f" %(p[0],p[1],p[2])
			self.cloud.append(p)
		#print len(self.cloud)

		#filter using given intial cubical region
		print "old array:"
		print self.cloud
		l=len(self.cloud)
		for i in range(len(self.cloud)-1,-1,-1):
			if self.cloud[i][0]>self.max.x or self.cloud[i][0]<self.min.x or self.cloud[i][1]>self.max.y or self.cloud[i][1]<self.min.y or self.cloud[i][2]>self.max.z or self.cloud[i][2]<self.min.z:
				del self.cloud[i]
		print "new array:"
		self.header.stamp=rospy.Time.now()
		self.header.seq+=1
		newCloud=pc2.create_cloud_xyz32(self.header,self.cloud)
		pub.publish(newCloud)
		#print newCloud.header
		#print newCloud.fields
		print len(self.cloud)
		print "length difference: " + str(l-len(self.cloud))

	def filterPC(self,data): 
		print "old array:"
		print self.cloud
		l=len(self.cloud)
		for i in range(len(self.cloud)-1,-1,-1):
			if self.cloud[i][0]>data.max.x or self.cloud[i][0]<data.min.x or self.cloud[i][1]>data.max.y or self.cloud[i][1]<data.min.y :
				del self.cloud[i]
		print "new array:"
		self.header.stamp=rospy.Time.now()
		self.header.seq+=1
		newCloud=pc2.create_cloud_xyz32(self.header,self.cloud)
		pub.publish(newCloud)
		print self.cloud
		print len(self.cloud)
		print "length difference: " + str(l-len(self.cloud))
		return FilterPCResponse(True)
			
		
	def dump(self,data):
		pup.publish()
		return 

	def printPC(self,data):
		print self.cloud
		print "length: " + str(len(self.cloud))
		return	


def from_bytes (data, big_endian = False):
    if isinstance(data, str):
        data = bytearray(data)
    if big_endian:
        data = reversed(data)
    num = 0
    for offset, byte in enumerate(data):
        num += byte << (offset * 8)
    return num

if __name__=='__main__' :
	intial_input=False
	'''	
	xmax=input("xmax: ")
	xmin=input("xmin: ")
	ymax=input("ymax: ")
	ymin=input("ymin: ")
	'''
	xmax=1
	xmin=0
	ymax=0
	ymin=0
	zmax=1
	zmin=0
	max=[xmax,ymax,zmax]
	min=[xmin,ymin,zmin]	
	print "cloud listener starting"
	rospy.init_node('cloudListener')
	pointcloud=Config(max,min)
	sub=rospy.Subscriber('mcptam/map_points',PointCloud2, pointcloud.callback)
	pub=rospy.Publisher('filteredCloudGood',PointCloud2,queue_size=10)


	dump=rospy.Service('dump', Empty, pointcloud.dump)
	filterPC=rospy.Service('filterPC', FilterPC, pointcloud.filterPC)
	printPC=rospy.Service('printPC',Empty,pointcloud.printPC)
	rospy.spin()
