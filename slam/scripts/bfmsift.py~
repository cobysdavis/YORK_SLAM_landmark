#!/usr/bin/env python
import numpy as np
import cv2
from matplotlib import pyplot as plt
from random import randint
import math

def output4Matches(good_matches,kp):
	list=[]
	prev=[]
	thresh=500
	while len(list)<4:
		x=randint(0,len(good_matches)-1)
		if not already_chosen(prev,x):
			if not close_to_others(prev,x,thresh,kp):
				list.append(good_matches[x])
				prev.append(x)
				print "good match"
	for l in prev:
		print "point:" + str(kp[l].pt)
	for l in list:
		print kp[l.trainIdx].pt
	return list

def distance(xi,xii,yi,yii):
    sq1 = (xi-xii)*(xi-xii)
    sq2 = (yi-yii)*(yi-yii)
    return math.sqrt(sq1 + sq2)

def close_to_others(prev,x,thresh,kp):
	print "new candidate"	
	if len(prev)==0:
		return False
	for l in prev:
		#print "distance: "+ str(distance(kp[l].pt[0],kp[x].pt[0],kp[l].pt[1],kp[x].pt[1]))
		if distance(kp[l].pt[0],kp[x].pt[0],kp[l].pt[1],kp[x].pt[1])<thresh:
			return True
	return False

def already_chosen(list,x):
	for l in list:
		if l==x:
			return True
	return False


def create_same_points(points,kp1,kp2):
	list=[]
	list.append([])
	list.append([])
	for p in points:
		list[0].append(kp1[p.queryIdx].pt)
		list[1].append(kp2[p.trainIdx].pt)
	a=np.float32(list[0])
	b=np.float32(list[1])
	list2=[]
	list2.append(a)
	list2.append(b)
	return list2
	

def drawMatches(img1, img2,list1,list2):
    # Create a new output image that concatenates the two images together
    # (a.k.a) a montage
    rows1 = img1.shape[0]
    cols1 = img1.shape[1]
    rows2 = img2.shape[0]
    cols2 = img2.shape[1]

    out = np.zeros((max([rows1,rows2]),cols1+cols2,3), dtype='uint8')

    # Place the first image to the left
    out[:rows1,:cols1] = np.dstack([img1, img1, img1])

    # Place the next image to the right of it
    out[:rows2,cols1:] = np.dstack([img2, img2, img2])

    # For each pair of points we have between both images
    # draw circles, then connect a line between them
    for i in range(0,4):
	
        # x - columns
        # y - rows
        (x1,y1) = list1[i]
        (x2,y2) = list2[i]
	print str((x1,y1))
	print str((x2,y2))
        # Draw a small circle at both co-ordinates
        # radius 4
        # colour blue
        # thickness = 1
        cv2.circle(out, (int(x1),int(y1)), 8, (255, 0, 0), 7)   
        cv2.circle(out, (int(x2)+cols1,int(y2)), 8, (255, 0, 0), 7)

        # Draw a line in between the two points
        # thickness = 1
        # colour blue
        cv2.line(out, (int(x1),int(y1)), (int(x2)+cols1,int(y2)), (255, 0, 0), 8)


    # Show the image
    #cv2.imshow('Matched Features', out)
    cv2.waitKey(0)
    cv2.destroyWindow('Matched Features')

    # Also return the image if you'd like a copy
    return out


img1 = cv2.imread('1.jpg',0) # queryImage
img2 = cv2.imread('logo.jpg',0) # trainImage
threshhold=0.3

# Initiate SIFT detector
sift = cv2.xfeatures2d.SIFT_create()
#sift=cv2.SIFT()
print "post sift"
# find the keypoints and descriptors with SIFT
kp1, des1 = sift.detectAndCompute(img1,None)
print "post sift"
kp2, des2 = sift.detectAndCompute(img2,None)
print "post sift"

# BFMatcher with default params
bf = cv2.BFMatcher()
matches = bf.knnMatch(des1,des2, k=2)

# Apply ratio test
good = []
for m,n in matches:
    if m.distance < threshhold*n.distance:
	good.append([m])
good2=[]
for m,n in matches:
    if m.distance < threshhold*n.distance:
	good2.append(m)



# cv2.drawMatchesKnn expects list of lists as matches.
img3 = cv2.drawMatchesKnn(img1,kp1,img2,kp2,good,None,flags=2)

plt.imshow(img3),plt.show()

#output 4 necessary matches
matching_points=output4Matches(good2,kp2)

point_list=create_same_points(matching_points,kp1,kp2)

#draw 4  matching points
img4 = drawMatches(img1,img2,point_list[0],point_list[1])

plt.imshow(img4),plt.show()

#create transfomration matrix
M = cv2.getPerspectiveTransform(point_list[0],point_list[1])
print M

#apply to query Image to see if matrix is correct
dst1 = cv2.warpPerspective(img1,M,(3000,3000))
plt.subplot(121),plt.imshow(img1),plt.title('Input')
plt.subplot(122),plt.imshow(dst1),plt.title('Output')
plt.show()





